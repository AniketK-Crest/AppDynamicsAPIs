// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// BaseEntity struct for BaseEntity
type BaseEntity struct {
	BaseEntityAllOf
	// Name of the connection or configuration
	DisplayName string `json:"displayName"`
	// Description for this connection or configuration
	Description *string `json:"description,omitempty"`
}

// NewBaseEntity instantiates a new BaseEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEntity(displayName string, type_ ProviderType) *BaseEntity {
	this := BaseEntity{}
	this.DisplayName = displayName
	this.Type = type_
	return &this
}

// NewBaseEntityWithDefaults instantiates a new BaseEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEntityWithDefaults() *BaseEntity {
	this := BaseEntity{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *BaseEntity) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *BaseEntity) GetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *BaseEntity) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BaseEntity) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEntity) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseEntity) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BaseEntity) SetDescription(v string) {
	o.Description = &v
}

func (o BaseEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseEntityAllOf, errBaseEntityAllOf := json.Marshal(o.BaseEntityAllOf)
	if errBaseEntityAllOf != nil {
		return []byte{}, errBaseEntityAllOf
	}
	errBaseEntityAllOf = json.Unmarshal([]byte(serializedBaseEntityAllOf), &toSerialize)
	if errBaseEntityAllOf != nil {
		return []byte{}, errBaseEntityAllOf
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableBaseEntity struct {
	value *BaseEntity
	isSet bool
}

func (v NullableBaseEntity) Get() *BaseEntity {
	return v.value
}

func (v *NullableBaseEntity) Set(val *BaseEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEntity(val *BaseEntity) *NullableBaseEntity {
	return &NullableBaseEntity{value: val, isSet: true}
}

func (v NullableBaseEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


