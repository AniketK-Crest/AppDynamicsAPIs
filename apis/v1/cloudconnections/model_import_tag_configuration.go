// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// ImportTagConfiguration Configuration for importing tags of resources that are being monitored
type ImportTagConfiguration struct {
	// It is true by default. Tags will be imported for all the resources that are being monitored by default
	Enabled bool `json:"enabled"`
	// Array of that need to be excluded from being imported. It can be set only when enabled is true
	ExcludedKeys []string `json:"excludedKeys,omitempty"`
}

// NewImportTagConfiguration instantiates a new ImportTagConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportTagConfiguration(enabled bool) *ImportTagConfiguration {
	this := ImportTagConfiguration{}
	this.Enabled = enabled
	return &this
}

// NewImportTagConfigurationWithDefaults instantiates a new ImportTagConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportTagConfigurationWithDefaults() *ImportTagConfiguration {
	this := ImportTagConfiguration{}
	var enabled bool = true
	this.Enabled = enabled
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ImportTagConfiguration) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ImportTagConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ImportTagConfiguration) SetEnabled(v bool) {
	o.Enabled = v
}

// GetExcludedKeys returns the ExcludedKeys field value if set, zero value otherwise.
func (o *ImportTagConfiguration) GetExcludedKeys() []string {
	if o == nil || isNil(o.ExcludedKeys) {
		var ret []string
		return ret
	}
	return o.ExcludedKeys
}

// GetExcludedKeysOk returns a tuple with the ExcludedKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportTagConfiguration) GetExcludedKeysOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludedKeys) {
    return nil, false
	}
	return o.ExcludedKeys, true
}

// HasExcludedKeys returns a boolean if a field has been set.
func (o *ImportTagConfiguration) HasExcludedKeys() bool {
	if o != nil && !isNil(o.ExcludedKeys) {
		return true
	}

	return false
}

// SetExcludedKeys gets a reference to the given []string and assigns it to the ExcludedKeys field.
func (o *ImportTagConfiguration) SetExcludedKeys(v []string) {
	o.ExcludedKeys = v
}

func (o ImportTagConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.ExcludedKeys) {
		toSerialize["excludedKeys"] = o.ExcludedKeys
	}
	return json.Marshal(toSerialize)
}

type NullableImportTagConfiguration struct {
	value *ImportTagConfiguration
	isSet bool
}

func (v NullableImportTagConfiguration) Get() *ImportTagConfiguration {
	return v.value
}

func (v *NullableImportTagConfiguration) Set(val *ImportTagConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableImportTagConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableImportTagConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportTagConfiguration(val *ImportTagConfiguration) *NullableImportTagConfiguration {
	return &NullableImportTagConfiguration{value: val, isSet: true}
}

func (v NullableImportTagConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportTagConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


