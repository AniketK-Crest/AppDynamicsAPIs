/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
	"fmt"
)

// AWSConnectionResponseDetails - struct for AWSConnectionResponseDetails
type AWSConnectionResponseDetails struct {
	AccessKeyConnectionResponseDetails *AccessKeyConnectionResponseDetails
	RoleDelegationConnectionResponseDetails *RoleDelegationConnectionResponseDetails
}

// AccessKeyConnectionResponseDetailsAsAWSConnectionResponseDetails is a convenience function that returns AccessKeyConnectionResponseDetails wrapped in AWSConnectionResponseDetails
func AccessKeyConnectionResponseDetailsAsAWSConnectionResponseDetails(v *AccessKeyConnectionResponseDetails) AWSConnectionResponseDetails {
	return AWSConnectionResponseDetails{
		AccessKeyConnectionResponseDetails: v,
	}
}

// RoleDelegationConnectionResponseDetailsAsAWSConnectionResponseDetails is a convenience function that returns RoleDelegationConnectionResponseDetails wrapped in AWSConnectionResponseDetails
func RoleDelegationConnectionResponseDetailsAsAWSConnectionResponseDetails(v *RoleDelegationConnectionResponseDetails) AWSConnectionResponseDetails {
	return AWSConnectionResponseDetails{
		RoleDelegationConnectionResponseDetails: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AWSConnectionResponseDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessKeyConnectionResponseDetails
	err = newStrictDecoder(data).Decode(&dst.AccessKeyConnectionResponseDetails)
	if err == nil {
		jsonAccessKeyConnectionResponseDetails, _ := json.Marshal(dst.AccessKeyConnectionResponseDetails)
		if string(jsonAccessKeyConnectionResponseDetails) == "{}" { // empty struct
			dst.AccessKeyConnectionResponseDetails = nil
		} else {
			match++
		}
	} else {
		dst.AccessKeyConnectionResponseDetails = nil
	}

	// try to unmarshal data into RoleDelegationConnectionResponseDetails
	err = newStrictDecoder(data).Decode(&dst.RoleDelegationConnectionResponseDetails)
	if err == nil {
		jsonRoleDelegationConnectionResponseDetails, _ := json.Marshal(dst.RoleDelegationConnectionResponseDetails)
		if string(jsonRoleDelegationConnectionResponseDetails) == "{}" { // empty struct
			dst.RoleDelegationConnectionResponseDetails = nil
		} else {
			match++
		}
	} else {
		dst.RoleDelegationConnectionResponseDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessKeyConnectionResponseDetails = nil
		dst.RoleDelegationConnectionResponseDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AWSConnectionResponseDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AWSConnectionResponseDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AWSConnectionResponseDetails) MarshalJSON() ([]byte, error) {
	if src.AccessKeyConnectionResponseDetails != nil {
		return json.Marshal(&src.AccessKeyConnectionResponseDetails)
	}

	if src.RoleDelegationConnectionResponseDetails != nil {
		return json.Marshal(&src.RoleDelegationConnectionResponseDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AWSConnectionResponseDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccessKeyConnectionResponseDetails != nil {
		return obj.AccessKeyConnectionResponseDetails
	}

	if obj.RoleDelegationConnectionResponseDetails != nil {
		return obj.RoleDelegationConnectionResponseDetails
	}

	// all schemas are nil
	return nil
}

type NullableAWSConnectionResponseDetails struct {
	value *AWSConnectionResponseDetails
	isSet bool
}

func (v NullableAWSConnectionResponseDetails) Get() *AWSConnectionResponseDetails {
	return v.value
}

func (v *NullableAWSConnectionResponseDetails) Set(val *AWSConnectionResponseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSConnectionResponseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSConnectionResponseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSConnectionResponseDetails(val *AWSConnectionResponseDetails) *NullableAWSConnectionResponseDetails {
	return &NullableAWSConnectionResponseDetails{value: val, isSet: true}
}

func (v NullableAWSConnectionResponseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSConnectionResponseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


