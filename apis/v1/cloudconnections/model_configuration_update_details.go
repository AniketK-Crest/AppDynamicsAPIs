// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
	"fmt"
)

// ConfigurationUpdateDetails struct for ConfigurationUpdateDetails
type ConfigurationUpdateDetails struct {
	AWSConfigurationDetails *AWSConfigurationDetails
	AzureConfigurationDetails *AzureConfigurationDetails
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConfigurationUpdateDetails) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AWSConfigurationDetails
	err = json.Unmarshal(data, &dst.AWSConfigurationDetails);
	if err == nil {
		jsonAWSConfigurationDetails, _ := json.Marshal(dst.AWSConfigurationDetails)
		if string(jsonAWSConfigurationDetails) == "{}" { // empty struct
			dst.AWSConfigurationDetails = nil
		} else {
			return nil // data stored in dst.AWSConfigurationDetails, return on the first match
		}
	} else {
		dst.AWSConfigurationDetails = nil
	}

	// try to unmarshal JSON data into AzureConfigurationDetails
	err = json.Unmarshal(data, &dst.AzureConfigurationDetails);
	if err == nil {
		jsonAzureConfigurationDetails, _ := json.Marshal(dst.AzureConfigurationDetails)
		if string(jsonAzureConfigurationDetails) == "{}" { // empty struct
			dst.AzureConfigurationDetails = nil
		} else {
			return nil // data stored in dst.AzureConfigurationDetails, return on the first match
		}
	} else {
		dst.AzureConfigurationDetails = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConfigurationUpdateDetails)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ConfigurationUpdateDetails) MarshalJSON() ([]byte, error) {
	if src.AWSConfigurationDetails != nil {
		return json.Marshal(&src.AWSConfigurationDetails)
	}

	if src.AzureConfigurationDetails != nil {
		return json.Marshal(&src.AzureConfigurationDetails)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableConfigurationUpdateDetails struct {
	value *ConfigurationUpdateDetails
	isSet bool
}

func (v NullableConfigurationUpdateDetails) Get() *ConfigurationUpdateDetails {
	return v.value
}

func (v *NullableConfigurationUpdateDetails) Set(val *ConfigurationUpdateDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationUpdateDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationUpdateDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationUpdateDetails(val *ConfigurationUpdateDetails) *NullableConfigurationUpdateDetails {
	return &NullableConfigurationUpdateDetails{value: val, isSet: true}
}

func (v NullableConfigurationUpdateDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationUpdateDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


