// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
	"fmt"
)

// ConnectionUpdateDetails - struct for ConnectionUpdateDetails
type ConnectionUpdateDetails struct {
	ConnectionUpdateDetailsOneOf *ConnectionUpdateDetailsOneOf
	ConnectionUpdateDetailsOneOf1 *ConnectionUpdateDetailsOneOf1
	ConnectionUpdateDetailsOneOf2 *ConnectionUpdateDetailsOneOf2
}

// ConnectionUpdateDetailsOneOfAsConnectionUpdateDetails is a convenience function that returns ConnectionUpdateDetailsOneOf wrapped in ConnectionUpdateDetails
func ConnectionUpdateDetailsOneOfAsConnectionUpdateDetails(v *ConnectionUpdateDetailsOneOf) ConnectionUpdateDetails {
	return ConnectionUpdateDetails{
		ConnectionUpdateDetailsOneOf: v,
	}
}

// ConnectionUpdateDetailsOneOf1AsConnectionUpdateDetails is a convenience function that returns ConnectionUpdateDetailsOneOf1 wrapped in ConnectionUpdateDetails
func ConnectionUpdateDetailsOneOf1AsConnectionUpdateDetails(v *ConnectionUpdateDetailsOneOf1) ConnectionUpdateDetails {
	return ConnectionUpdateDetails{
		ConnectionUpdateDetailsOneOf1: v,
	}
}

// ConnectionUpdateDetailsOneOf2AsConnectionUpdateDetails is a convenience function that returns ConnectionUpdateDetailsOneOf2 wrapped in ConnectionUpdateDetails
func ConnectionUpdateDetailsOneOf2AsConnectionUpdateDetails(v *ConnectionUpdateDetailsOneOf2) ConnectionUpdateDetails {
	return ConnectionUpdateDetails{
		ConnectionUpdateDetailsOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectionUpdateDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConnectionUpdateDetailsOneOf
	err = newStrictDecoder(data).Decode(&dst.ConnectionUpdateDetailsOneOf)
	if err == nil {
		jsonConnectionUpdateDetailsOneOf, _ := json.Marshal(dst.ConnectionUpdateDetailsOneOf)
		if string(jsonConnectionUpdateDetailsOneOf) == "{}" { // empty struct
			dst.ConnectionUpdateDetailsOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ConnectionUpdateDetailsOneOf = nil
	}

	// try to unmarshal data into ConnectionUpdateDetailsOneOf1
	err = newStrictDecoder(data).Decode(&dst.ConnectionUpdateDetailsOneOf1)
	if err == nil {
		jsonConnectionUpdateDetailsOneOf1, _ := json.Marshal(dst.ConnectionUpdateDetailsOneOf1)
		if string(jsonConnectionUpdateDetailsOneOf1) == "{}" { // empty struct
			dst.ConnectionUpdateDetailsOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ConnectionUpdateDetailsOneOf1 = nil
	}

	// try to unmarshal data into ConnectionUpdateDetailsOneOf2
	err = newStrictDecoder(data).Decode(&dst.ConnectionUpdateDetailsOneOf2)
	if err == nil {
		jsonConnectionUpdateDetailsOneOf2, _ := json.Marshal(dst.ConnectionUpdateDetailsOneOf2)
		if string(jsonConnectionUpdateDetailsOneOf2) == "{}" { // empty struct
			dst.ConnectionUpdateDetailsOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ConnectionUpdateDetailsOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConnectionUpdateDetailsOneOf = nil
		dst.ConnectionUpdateDetailsOneOf1 = nil
		dst.ConnectionUpdateDetailsOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConnectionUpdateDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConnectionUpdateDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectionUpdateDetails) MarshalJSON() ([]byte, error) {
	if src.ConnectionUpdateDetailsOneOf != nil {
		return json.Marshal(&src.ConnectionUpdateDetailsOneOf)
	}

	if src.ConnectionUpdateDetailsOneOf1 != nil {
		return json.Marshal(&src.ConnectionUpdateDetailsOneOf1)
	}

	if src.ConnectionUpdateDetailsOneOf2 != nil {
		return json.Marshal(&src.ConnectionUpdateDetailsOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectionUpdateDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ConnectionUpdateDetailsOneOf != nil {
		return obj.ConnectionUpdateDetailsOneOf
	}

	if obj.ConnectionUpdateDetailsOneOf1 != nil {
		return obj.ConnectionUpdateDetailsOneOf1
	}

	if obj.ConnectionUpdateDetailsOneOf2 != nil {
		return obj.ConnectionUpdateDetailsOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableConnectionUpdateDetails struct {
	value *ConnectionUpdateDetails
	isSet bool
}

func (v NullableConnectionUpdateDetails) Get() *ConnectionUpdateDetails {
	return v.value
}

func (v *NullableConnectionUpdateDetails) Set(val *ConnectionUpdateDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionUpdateDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionUpdateDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionUpdateDetails(val *ConnectionUpdateDetails) *NullableConnectionUpdateDetails {
	return &NullableConnectionUpdateDetails{value: val, isSet: true}
}

func (v NullableConnectionUpdateDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionUpdateDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


