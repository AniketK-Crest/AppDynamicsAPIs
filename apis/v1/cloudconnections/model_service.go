// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// Service struct for Service
type Service struct {
	Name string `json:"name"`
	ImportTags *ImportTagConfiguration `json:"importTags,omitempty"`
	// expression for filtering resources to be monitored, based on tags
	TagFilter *string `json:"tagFilter,omitempty"`
	Polling *ScheduleInterval `json:"polling,omitempty"`
}

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService(name string) *Service {
	this := Service{}
	this.Name = name
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	return &this
}

// GetName returns the Name field value
func (o *Service) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Service) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Service) SetName(v string) {
	o.Name = v
}

// GetImportTags returns the ImportTags field value if set, zero value otherwise.
func (o *Service) GetImportTags() ImportTagConfiguration {
	if o == nil || isNil(o.ImportTags) {
		var ret ImportTagConfiguration
		return ret
	}
	return *o.ImportTags
}

// GetImportTagsOk returns a tuple with the ImportTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetImportTagsOk() (*ImportTagConfiguration, bool) {
	if o == nil || isNil(o.ImportTags) {
    return nil, false
	}
	return o.ImportTags, true
}

// HasImportTags returns a boolean if a field has been set.
func (o *Service) HasImportTags() bool {
	if o != nil && !isNil(o.ImportTags) {
		return true
	}

	return false
}

// SetImportTags gets a reference to the given ImportTagConfiguration and assigns it to the ImportTags field.
func (o *Service) SetImportTags(v ImportTagConfiguration) {
	o.ImportTags = &v
}

// GetTagFilter returns the TagFilter field value if set, zero value otherwise.
func (o *Service) GetTagFilter() string {
	if o == nil || isNil(o.TagFilter) {
		var ret string
		return ret
	}
	return *o.TagFilter
}

// GetTagFilterOk returns a tuple with the TagFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetTagFilterOk() (*string, bool) {
	if o == nil || isNil(o.TagFilter) {
    return nil, false
	}
	return o.TagFilter, true
}

// HasTagFilter returns a boolean if a field has been set.
func (o *Service) HasTagFilter() bool {
	if o != nil && !isNil(o.TagFilter) {
		return true
	}

	return false
}

// SetTagFilter gets a reference to the given string and assigns it to the TagFilter field.
func (o *Service) SetTagFilter(v string) {
	o.TagFilter = &v
}

// GetPolling returns the Polling field value if set, zero value otherwise.
func (o *Service) GetPolling() ScheduleInterval {
	if o == nil || isNil(o.Polling) {
		var ret ScheduleInterval
		return ret
	}
	return *o.Polling
}

// GetPollingOk returns a tuple with the Polling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetPollingOk() (*ScheduleInterval, bool) {
	if o == nil || isNil(o.Polling) {
    return nil, false
	}
	return o.Polling, true
}

// HasPolling returns a boolean if a field has been set.
func (o *Service) HasPolling() bool {
	if o != nil && !isNil(o.Polling) {
		return true
	}

	return false
}

// SetPolling gets a reference to the given ScheduleInterval and assigns it to the Polling field.
func (o *Service) SetPolling(v ScheduleInterval) {
	o.Polling = &v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ImportTags) {
		toSerialize["importTags"] = o.ImportTags
	}
	if !isNil(o.TagFilter) {
		toSerialize["tagFilter"] = o.TagFilter
	}
	if !isNil(o.Polling) {
		toSerialize["polling"] = o.Polling
	}
	return json.Marshal(toSerialize)
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


