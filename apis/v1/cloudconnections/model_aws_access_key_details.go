// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// AWSAccessKeyDetails struct for AWSAccessKeyDetails
type AWSAccessKeyDetails struct {
	AccessType
	// AWS Access keys are long-term credentials for an AWS IAM user, or account root user. The access key ID is one of two access keys needed to authenticate to AWS. The other is a secret access key. You need access keys to make programmatic calls using the AWS CLI, AWS Tools, or PowerShell.
	AccessKeyId string `json:"accessKeyId"`
	// The secret access key is one of two access keys needed to authenticate to AWS. The other is an access key ID. The secret access key is only available once, when you create it. Download the generated secret access key and save in a secure location. If the secret access key is lost or deleted, you must create a new one. You need access keys to make programmatic calls using the AWS CLI, AWS Tools, or PowerShell.
	SecretAccessKey string `json:"secretAccessKey"`
}

// NewAWSAccessKeyDetails instantiates a new AWSAccessKeyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSAccessKeyDetails(accessKeyId string, secretAccessKey string, accessType ConnectionAccessType) *AWSAccessKeyDetails {
	this := AWSAccessKeyDetails{}
	this.AccessType = *NewAccessType(accessType)
	this.AccessKeyId = accessKeyId
	this.SecretAccessKey = secretAccessKey
	return &this
}

// NewAWSAccessKeyDetailsWithDefaults instantiates a new AWSAccessKeyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSAccessKeyDetailsWithDefaults() *AWSAccessKeyDetails {
	this := AWSAccessKeyDetails{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value
func (o *AWSAccessKeyDetails) GetAccessKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
func (o *AWSAccessKeyDetails) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKeyId, true
}

// SetAccessKeyId sets field value
func (o *AWSAccessKeyDetails) SetAccessKeyId(v string) {
	o.AccessKeyId = v
}

// GetSecretAccessKey returns the SecretAccessKey field value
func (o *AWSAccessKeyDetails) GetSecretAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value
// and a boolean to check if the value has been set.
func (o *AWSAccessKeyDetails) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretAccessKey, true
}

// SetSecretAccessKey sets field value
func (o *AWSAccessKeyDetails) SetSecretAccessKey(v string) {
	o.SecretAccessKey = v
}

func (o AWSAccessKeyDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAccessType, errAccessType := json.Marshal(o.AccessType)
	if errAccessType != nil {
		return []byte{}, errAccessType
	}
	errAccessType = json.Unmarshal([]byte(serializedAccessType), &toSerialize)
	if errAccessType != nil {
		return []byte{}, errAccessType
	}
	if true {
		toSerialize["accessKeyId"] = o.AccessKeyId
	}
	if true {
		toSerialize["secretAccessKey"] = o.SecretAccessKey
	}
	return json.Marshal(toSerialize)
}

type NullableAWSAccessKeyDetails struct {
	value *AWSAccessKeyDetails
	isSet bool
}

func (v NullableAWSAccessKeyDetails) Get() *AWSAccessKeyDetails {
	return v.value
}

func (v *NullableAWSAccessKeyDetails) Set(val *AWSAccessKeyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSAccessKeyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSAccessKeyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSAccessKeyDetails(val *AWSAccessKeyDetails) *NullableAWSAccessKeyDetails {
	return &NullableAWSAccessKeyDetails{value: val, isSet: true}
}

func (v NullableAWSAccessKeyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSAccessKeyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
