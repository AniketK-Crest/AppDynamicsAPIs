// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// BaseConnectionAllOf struct for BaseConnectionAllOf
type BaseConnectionAllOf struct {
	// Configuration ID assigned to the connection
	ConfigurationId *string `json:"configurationId,omitempty"`
}

// NewBaseConnectionAllOf instantiates a new BaseConnectionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseConnectionAllOf() *BaseConnectionAllOf {
	this := BaseConnectionAllOf{}
	return &this
}

// NewBaseConnectionAllOfWithDefaults instantiates a new BaseConnectionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseConnectionAllOfWithDefaults() *BaseConnectionAllOf {
	this := BaseConnectionAllOf{}
	return &this
}

// GetConfigurationId returns the ConfigurationId field value if set, zero value otherwise.
func (o *BaseConnectionAllOf) GetConfigurationId() string {
	if o == nil || isNil(o.ConfigurationId) {
		var ret string
		return ret
	}
	return *o.ConfigurationId
}

// GetConfigurationIdOk returns a tuple with the ConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnectionAllOf) GetConfigurationIdOk() (*string, bool) {
	if o == nil || isNil(o.ConfigurationId) {
    return nil, false
	}
	return o.ConfigurationId, true
}

// HasConfigurationId returns a boolean if a field has been set.
func (o *BaseConnectionAllOf) HasConfigurationId() bool {
	if o != nil && !isNil(o.ConfigurationId) {
		return true
	}

	return false
}

// SetConfigurationId gets a reference to the given string and assigns it to the ConfigurationId field.
func (o *BaseConnectionAllOf) SetConfigurationId(v string) {
	o.ConfigurationId = &v
}

func (o BaseConnectionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConfigurationId) {
		toSerialize["configurationId"] = o.ConfigurationId
	}
	return json.Marshal(toSerialize)
}

type NullableBaseConnectionAllOf struct {
	value *BaseConnectionAllOf
	isSet bool
}

func (v NullableBaseConnectionAllOf) Get() *BaseConnectionAllOf {
	return v.value
}

func (v *NullableBaseConnectionAllOf) Set(val *BaseConnectionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseConnectionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseConnectionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseConnectionAllOf(val *BaseConnectionAllOf) *NullableBaseConnectionAllOf {
	return &NullableBaseConnectionAllOf{value: val, isSet: true}
}

func (v NullableBaseConnectionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseConnectionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


