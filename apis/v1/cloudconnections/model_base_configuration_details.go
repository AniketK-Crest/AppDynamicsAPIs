/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// BaseConfigurationDetails struct for BaseConfigurationDetails
type BaseConfigurationDetails struct {
	// Geographic locations used to fetch metrics
	Regions []string `json:"regions,omitempty"`
	Polling *ScheduleInterval `json:"polling,omitempty"`
	ImportTags *ImportTagConfiguration `json:"importTags,omitempty"`
	// expression for filtering resources to be monitored, based on tags
	TagFilter *string `json:"tagFilter,omitempty"`
	// services for which we will fetch metrics
	Services []Service `json:"services,omitempty"`
}

// NewBaseConfigurationDetails instantiates a new BaseConfigurationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseConfigurationDetails() *BaseConfigurationDetails {
	this := BaseConfigurationDetails{}
	return &this
}

// NewBaseConfigurationDetailsWithDefaults instantiates a new BaseConfigurationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseConfigurationDetailsWithDefaults() *BaseConfigurationDetails {
	this := BaseConfigurationDetails{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *BaseConfigurationDetails) GetRegions() []string {
	if o == nil || isNil(o.Regions) {
		var ret []string
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConfigurationDetails) GetRegionsOk() ([]string, bool) {
	if o == nil || isNil(o.Regions) {
    return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *BaseConfigurationDetails) HasRegions() bool {
	if o != nil && !isNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []string and assigns it to the Regions field.
func (o *BaseConfigurationDetails) SetRegions(v []string) {
	o.Regions = v
}

// GetPolling returns the Polling field value if set, zero value otherwise.
func (o *BaseConfigurationDetails) GetPolling() ScheduleInterval {
	if o == nil || isNil(o.Polling) {
		var ret ScheduleInterval
		return ret
	}
	return *o.Polling
}

// GetPollingOk returns a tuple with the Polling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConfigurationDetails) GetPollingOk() (*ScheduleInterval, bool) {
	if o == nil || isNil(o.Polling) {
    return nil, false
	}
	return o.Polling, true
}

// HasPolling returns a boolean if a field has been set.
func (o *BaseConfigurationDetails) HasPolling() bool {
	if o != nil && !isNil(o.Polling) {
		return true
	}

	return false
}

// SetPolling gets a reference to the given ScheduleInterval and assigns it to the Polling field.
func (o *BaseConfigurationDetails) SetPolling(v ScheduleInterval) {
	o.Polling = &v
}

// GetImportTags returns the ImportTags field value if set, zero value otherwise.
func (o *BaseConfigurationDetails) GetImportTags() ImportTagConfiguration {
	if o == nil || isNil(o.ImportTags) {
		var ret ImportTagConfiguration
		return ret
	}
	return *o.ImportTags
}

// GetImportTagsOk returns a tuple with the ImportTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConfigurationDetails) GetImportTagsOk() (*ImportTagConfiguration, bool) {
	if o == nil || isNil(o.ImportTags) {
    return nil, false
	}
	return o.ImportTags, true
}

// HasImportTags returns a boolean if a field has been set.
func (o *BaseConfigurationDetails) HasImportTags() bool {
	if o != nil && !isNil(o.ImportTags) {
		return true
	}

	return false
}

// SetImportTags gets a reference to the given ImportTagConfiguration and assigns it to the ImportTags field.
func (o *BaseConfigurationDetails) SetImportTags(v ImportTagConfiguration) {
	o.ImportTags = &v
}

// GetTagFilter returns the TagFilter field value if set, zero value otherwise.
func (o *BaseConfigurationDetails) GetTagFilter() string {
	if o == nil || isNil(o.TagFilter) {
		var ret string
		return ret
	}
	return *o.TagFilter
}

// GetTagFilterOk returns a tuple with the TagFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConfigurationDetails) GetTagFilterOk() (*string, bool) {
	if o == nil || isNil(o.TagFilter) {
    return nil, false
	}
	return o.TagFilter, true
}

// HasTagFilter returns a boolean if a field has been set.
func (o *BaseConfigurationDetails) HasTagFilter() bool {
	if o != nil && !isNil(o.TagFilter) {
		return true
	}

	return false
}

// SetTagFilter gets a reference to the given string and assigns it to the TagFilter field.
func (o *BaseConfigurationDetails) SetTagFilter(v string) {
	o.TagFilter = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *BaseConfigurationDetails) GetServices() []Service {
	if o == nil || isNil(o.Services) {
		var ret []Service
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConfigurationDetails) GetServicesOk() ([]Service, bool) {
	if o == nil || isNil(o.Services) {
    return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *BaseConfigurationDetails) HasServices() bool {
	if o != nil && !isNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *BaseConfigurationDetails) SetServices(v []Service) {
	o.Services = v
}

func (o BaseConfigurationDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !isNil(o.Polling) {
		toSerialize["polling"] = o.Polling
	}
	if !isNil(o.ImportTags) {
		toSerialize["importTags"] = o.ImportTags
	}
	if !isNil(o.TagFilter) {
		toSerialize["tagFilter"] = o.TagFilter
	}
	if !isNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	return json.Marshal(toSerialize)
}

type NullableBaseConfigurationDetails struct {
	value *BaseConfigurationDetails
	isSet bool
}

func (v NullableBaseConfigurationDetails) Get() *BaseConfigurationDetails {
	return v.value
}

func (v *NullableBaseConfigurationDetails) Set(val *BaseConfigurationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseConfigurationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseConfigurationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseConfigurationDetails(val *BaseConfigurationDetails) *NullableBaseConfigurationDetails {
	return &NullableBaseConfigurationDetails{value: val, isSet: true}
}

func (v NullableBaseConfigurationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseConfigurationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


