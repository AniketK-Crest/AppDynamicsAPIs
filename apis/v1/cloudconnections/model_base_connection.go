// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
)

// BaseConnection struct for BaseConnection
type BaseConnection struct {
	BaseEntity
	// Configuration ID assigned to the connection
	ConfigurationId *string `json:"configurationId,omitempty"`
}

// NewBaseConnection instantiates a new BaseConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseConnection(displayName string, type_ ProviderType) *BaseConnection {
	this := BaseConnection{}
	this.DisplayName = displayName
	this.Type = type_
	return &this
}

// NewBaseConnectionWithDefaults instantiates a new BaseConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseConnectionWithDefaults() *BaseConnection {
	this := BaseConnection{}
	return &this
}

// GetConfigurationId returns the ConfigurationId field value if set, zero value otherwise.
func (o *BaseConnection) GetConfigurationId() string {
	if o == nil || isNil(o.ConfigurationId) {
		var ret string
		return ret
	}
	return *o.ConfigurationId
}

// GetConfigurationIdOk returns a tuple with the ConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseConnection) GetConfigurationIdOk() (*string, bool) {
	if o == nil || isNil(o.ConfigurationId) {
    return nil, false
	}
	return o.ConfigurationId, true
}

// HasConfigurationId returns a boolean if a field has been set.
func (o *BaseConnection) HasConfigurationId() bool {
	if o != nil && !isNil(o.ConfigurationId) {
		return true
	}

	return false
}

// SetConfigurationId gets a reference to the given string and assigns it to the ConfigurationId field.
func (o *BaseConnection) SetConfigurationId(v string) {
	o.ConfigurationId = &v
}

func (o BaseConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseEntity, errBaseEntity := json.Marshal(o.BaseEntity)
	if errBaseEntity != nil {
		return []byte{}, errBaseEntity
	}
	errBaseEntity = json.Unmarshal([]byte(serializedBaseEntity), &toSerialize)
	if errBaseEntity != nil {
		return []byte{}, errBaseEntity
	}
	if !isNil(o.ConfigurationId) {
		toSerialize["configurationId"] = o.ConfigurationId
	}
	return json.Marshal(toSerialize)
}

type NullableBaseConnection struct {
	value *BaseConnection
	isSet bool
}

func (v NullableBaseConnection) Get() *BaseConnection {
	return v.value
}

func (v *NullableBaseConnection) Set(val *BaseConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseConnection(val *BaseConnection) *NullableBaseConnection {
	return &NullableBaseConnection{value: val, isSet: true}
}

func (v NullableBaseConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


