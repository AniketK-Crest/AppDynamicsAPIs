// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Connections API

Enables you to manage cloud connections

API version: 1.0.0
Contact: support@appdynamics.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudconnections

import (
	"encoding/json"
	"fmt"
)

// ConnectionAccessType Connection type discriminator
type ConnectionAccessType string

// List of ConnectionAccessType
const (
	ROLE_DELEGATION ConnectionAccessType = "role_delegation"
	ACCESS_KEY ConnectionAccessType = "access_key"
)

// All allowed values of ConnectionAccessType enum
var AllowedConnectionAccessTypeEnumValues = []ConnectionAccessType{
	"role_delegation",
	"access_key",
}

func (v *ConnectionAccessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionAccessType(value)
	for _, existing := range AllowedConnectionAccessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionAccessType", value)
}

// NewConnectionAccessTypeFromValue returns a pointer to a valid ConnectionAccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionAccessTypeFromValue(v string) (*ConnectionAccessType, error) {
	ev := ConnectionAccessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionAccessType: valid values are %v", v, AllowedConnectionAccessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionAccessType) IsValid() bool {
	for _, existing := range AllowedConnectionAccessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionAccessType value
func (v ConnectionAccessType) Ptr() *ConnectionAccessType {
	return &v
}

type NullableConnectionAccessType struct {
	value *ConnectionAccessType
	isSet bool
}

func (v NullableConnectionAccessType) Get() *ConnectionAccessType {
	return v.value
}

func (v *NullableConnectionAccessType) Set(val *ConnectionAccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionAccessType(val *ConnectionAccessType) *NullableConnectionAccessType {
	return &NullableConnectionAccessType{value: val, isSet: true}
}

func (v NullableConnectionAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

