/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// ModelResultChunk A schema of the data to follow. This object can only be at the first position in the response.
type ModelResultChunk struct {
	// Attribute identifying a response chunk as holding the response model.
	Type *string `json:"type,omitempty"`
	Model *Model `json:"model,omitempty"`
}

// NewModelResultChunk instantiates a new ModelResultChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelResultChunk() *ModelResultChunk {
	this := ModelResultChunk{}
	return &this
}

// NewModelResultChunkWithDefaults instantiates a new ModelResultChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelResultChunkWithDefaults() *ModelResultChunk {
	this := ModelResultChunk{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelResultChunk) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResultChunk) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelResultChunk) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ModelResultChunk) SetType(v string) {
	o.Type = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ModelResultChunk) GetModel() Model {
	if o == nil || isNil(o.Model) {
		var ret Model
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResultChunk) GetModelOk() (*Model, bool) {
	if o == nil || isNil(o.Model) {
    return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ModelResultChunk) HasModel() bool {
	if o != nil && !isNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given Model and assigns it to the Model field.
func (o *ModelResultChunk) SetModel(v Model) {
	o.Model = &v
}

func (o ModelResultChunk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	return json.Marshal(toSerialize)
}

type NullableModelResultChunk struct {
	value *ModelResultChunk
	isSet bool
}

func (v NullableModelResultChunk) Get() *ModelResultChunk {
	return v.value
}

func (v *NullableModelResultChunk) Set(val *ModelResultChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableModelResultChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableModelResultChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelResultChunk(val *ModelResultChunk) *NullableModelResultChunk {
	return &NullableModelResultChunk{value: val, isSet: true}
}

func (v NullableModelResultChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelResultChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


