// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// QueryRequestBody Client request with a query.
type QueryRequestBody struct {
	// Query string.
	Query *string `json:"query,omitempty"`
}

// NewQueryRequestBody instantiates a new QueryRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryRequestBody() *QueryRequestBody {
	this := QueryRequestBody{}
	return &this
}

// NewQueryRequestBodyWithDefaults instantiates a new QueryRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryRequestBodyWithDefaults() *QueryRequestBody {
	this := QueryRequestBody{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *QueryRequestBody) GetQuery() string {
	if o == nil || isNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequestBody) GetQueryOk() (*string, bool) {
	if o == nil || isNil(o.Query) {
    return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryRequestBody) HasQuery() bool {
	if o != nil && !isNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *QueryRequestBody) SetQuery(v string) {
	o.Query = &v
}

func (o QueryRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableQueryRequestBody struct {
	value *QueryRequestBody
	isSet bool
}

func (v NullableQueryRequestBody) Get() *QueryRequestBody {
	return v.value
}

func (v *NullableQueryRequestBody) Set(val *QueryRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryRequestBody(val *QueryRequestBody) *NullableQueryRequestBody {
	return &NullableQueryRequestBody{value: val, isSet: true}
}

func (v NullableQueryRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


