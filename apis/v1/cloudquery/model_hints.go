/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// Hints Additional information about a single fetched expression from the query.
type Hints struct {
	// Type of observed component from AppD MELT Model. Optional, if applicable
	Kind *string `json:"kind,omitempty"`
	// Name of the MELT model property mentioned in the 'kind' hint. See AppD MELT Model  Optional, if applicable (for example not for expression)
	Field *string `json:"field,omitempty"`
	// Full name with namespace of the type.
	Type *string `json:"type,omitempty"`
}

// NewHints instantiates a new Hints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHints() *Hints {
	this := Hints{}
	return &this
}

// NewHintsWithDefaults instantiates a new Hints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHintsWithDefaults() *Hints {
	this := Hints{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Hints) GetKind() string {
	if o == nil || isNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hints) GetKindOk() (*string, bool) {
	if o == nil || isNil(o.Kind) {
    return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Hints) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *Hints) SetKind(v string) {
	o.Kind = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *Hints) GetField() string {
	if o == nil || isNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hints) GetFieldOk() (*string, bool) {
	if o == nil || isNil(o.Field) {
    return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *Hints) HasField() bool {
	if o != nil && !isNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *Hints) SetField(v string) {
	o.Field = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Hints) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hints) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Hints) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Hints) SetType(v string) {
	o.Type = &v
}

func (o Hints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !isNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableHints struct {
	value *Hints
	isSet bool
}

func (v NullableHints) Get() *Hints {
	return v.value
}

func (v *NullableHints) Set(val *Hints) {
	v.value = val
	v.isSet = true
}

func (v NullableHints) IsSet() bool {
	return v.isSet
}

func (v *NullableHints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHints(val *Hints) *NullableHints {
	return &NullableHints{value: val, isSet: true}
}

func (v NullableHints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


