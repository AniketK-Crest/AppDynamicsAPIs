// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// DatasetReference A reference to a specific dataset.
type DatasetReference struct {
	// Unique name of the dataset.
	Dataset *string `json:"$dataset,omitempty"`
	// JSON Path that filters the correct dataset from the list of all datasets.
	JsonPath *string `json:"$jsonPath,omitempty"`
}

// NewDatasetReference instantiates a new DatasetReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetReference() *DatasetReference {
	this := DatasetReference{}
	return &this
}

// NewDatasetReferenceWithDefaults instantiates a new DatasetReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetReferenceWithDefaults() *DatasetReference {
	this := DatasetReference{}
	return &this
}

// GetDataset returns the Dataset field value if set, zero value otherwise.
func (o *DatasetReference) GetDataset() string {
	if o == nil || isNil(o.Dataset) {
		var ret string
		return ret
	}
	return *o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetReference) GetDatasetOk() (*string, bool) {
	if o == nil || isNil(o.Dataset) {
    return nil, false
	}
	return o.Dataset, true
}

// HasDataset returns a boolean if a field has been set.
func (o *DatasetReference) HasDataset() bool {
	if o != nil && !isNil(o.Dataset) {
		return true
	}

	return false
}

// SetDataset gets a reference to the given string and assigns it to the Dataset field.
func (o *DatasetReference) SetDataset(v string) {
	o.Dataset = &v
}

// GetJsonPath returns the JsonPath field value if set, zero value otherwise.
func (o *DatasetReference) GetJsonPath() string {
	if o == nil || isNil(o.JsonPath) {
		var ret string
		return ret
	}
	return *o.JsonPath
}

// GetJsonPathOk returns a tuple with the JsonPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetReference) GetJsonPathOk() (*string, bool) {
	if o == nil || isNil(o.JsonPath) {
    return nil, false
	}
	return o.JsonPath, true
}

// HasJsonPath returns a boolean if a field has been set.
func (o *DatasetReference) HasJsonPath() bool {
	if o != nil && !isNil(o.JsonPath) {
		return true
	}

	return false
}

// SetJsonPath gets a reference to the given string and assigns it to the JsonPath field.
func (o *DatasetReference) SetJsonPath(v string) {
	o.JsonPath = &v
}

func (o DatasetReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Dataset) {
		toSerialize["$dataset"] = o.Dataset
	}
	if !isNil(o.JsonPath) {
		toSerialize["$jsonPath"] = o.JsonPath
	}
	return json.Marshal(toSerialize)
}

type NullableDatasetReference struct {
	value *DatasetReference
	isSet bool
}

func (v NullableDatasetReference) Get() *DatasetReference {
	return v.value
}

func (v *NullableDatasetReference) Set(val *DatasetReference) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetReference) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetReference(val *DatasetReference) *NullableDatasetReference {
	return &NullableDatasetReference{value: val, isSet: true}
}

func (v NullableDatasetReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


