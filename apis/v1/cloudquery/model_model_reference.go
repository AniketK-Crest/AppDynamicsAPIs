/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// ModelReference A reference to a specific model.
type ModelReference struct {
	// A unique model name.
	Model *string `json:"$model,omitempty"`
	// JSON Path that filters the correct model from the ModelResultChunk.
	JsonPath *string `json:"$jsonPath,omitempty"`
}

// NewModelReference instantiates a new ModelReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelReference() *ModelReference {
	this := ModelReference{}
	return &this
}

// NewModelReferenceWithDefaults instantiates a new ModelReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelReferenceWithDefaults() *ModelReference {
	this := ModelReference{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ModelReference) GetModel() string {
	if o == nil || isNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelReference) GetModelOk() (*string, bool) {
	if o == nil || isNil(o.Model) {
    return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ModelReference) HasModel() bool {
	if o != nil && !isNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ModelReference) SetModel(v string) {
	o.Model = &v
}

// GetJsonPath returns the JsonPath field value if set, zero value otherwise.
func (o *ModelReference) GetJsonPath() string {
	if o == nil || isNil(o.JsonPath) {
		var ret string
		return ret
	}
	return *o.JsonPath
}

// GetJsonPathOk returns a tuple with the JsonPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelReference) GetJsonPathOk() (*string, bool) {
	if o == nil || isNil(o.JsonPath) {
    return nil, false
	}
	return o.JsonPath, true
}

// HasJsonPath returns a boolean if a field has been set.
func (o *ModelReference) HasJsonPath() bool {
	if o != nil && !isNil(o.JsonPath) {
		return true
	}

	return false
}

// SetJsonPath gets a reference to the given string and assigns it to the JsonPath field.
func (o *ModelReference) SetJsonPath(v string) {
	o.JsonPath = &v
}

func (o ModelReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Model) {
		toSerialize["$model"] = o.Model
	}
	if !isNil(o.JsonPath) {
		toSerialize["$jsonPath"] = o.JsonPath
	}
	return json.Marshal(toSerialize)
}

type NullableModelReference struct {
	value *ModelReference
	isSet bool
}

func (v NullableModelReference) Get() *ModelReference {
	return v.value
}

func (v *NullableModelReference) Set(val *ModelReference) {
	v.value = val
	v.isSet = true
}

func (v NullableModelReference) IsSet() bool {
	return v.isSet
}

func (v *NullableModelReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelReference(val *ModelReference) *NullableModelReference {
	return &NullableModelReference{value: val, isSet: true}
}

func (v NullableModelReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


