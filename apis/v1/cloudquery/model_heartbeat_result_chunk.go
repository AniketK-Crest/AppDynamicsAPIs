/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// HeartbeatResultChunk An empty chunk sent to prevent the HTTP connection from being pre-maturely closed.
type HeartbeatResultChunk struct {
	// Attribute identifying a response chunk as a heartbeat.
	Type *string `json:"type,omitempty"`
}

// NewHeartbeatResultChunk instantiates a new HeartbeatResultChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeartbeatResultChunk() *HeartbeatResultChunk {
	this := HeartbeatResultChunk{}
	return &this
}

// NewHeartbeatResultChunkWithDefaults instantiates a new HeartbeatResultChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeartbeatResultChunkWithDefaults() *HeartbeatResultChunk {
	this := HeartbeatResultChunk{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HeartbeatResultChunk) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeartbeatResultChunk) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HeartbeatResultChunk) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HeartbeatResultChunk) SetType(v string) {
	o.Type = &v
}

func (o HeartbeatResultChunk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableHeartbeatResultChunk struct {
	value *HeartbeatResultChunk
	isSet bool
}

func (v NullableHeartbeatResultChunk) Get() *HeartbeatResultChunk {
	return v.value
}

func (v *NullableHeartbeatResultChunk) Set(val *HeartbeatResultChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableHeartbeatResultChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableHeartbeatResultChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeartbeatResultChunk(val *HeartbeatResultChunk) *NullableHeartbeatResultChunk {
	return &NullableHeartbeatResultChunk{value: val, isSet: true}
}

func (v NullableHeartbeatResultChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeartbeatResultChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


