// Copyright 2023 Cisco Systems, Inc.
// 
// Licensed under the MPL License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.mozilla.org/en-US/MPL/2.0/
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
)

// MetricMetadataResultItem Metadata for a metric data chunk.
type MetricMetadataResultItem struct {
	// Actual granularity of metric data points. The value is the length of the time interval of a single data point.
	GranularitySeconds *float32 `json:"granularitySeconds,omitempty"`
}

// NewMetricMetadataResultItem instantiates a new MetricMetadataResultItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricMetadataResultItem() *MetricMetadataResultItem {
	this := MetricMetadataResultItem{}
	return &this
}

// NewMetricMetadataResultItemWithDefaults instantiates a new MetricMetadataResultItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricMetadataResultItemWithDefaults() *MetricMetadataResultItem {
	this := MetricMetadataResultItem{}
	return &this
}

// GetGranularitySeconds returns the GranularitySeconds field value if set, zero value otherwise.
func (o *MetricMetadataResultItem) GetGranularitySeconds() float32 {
	if o == nil || isNil(o.GranularitySeconds) {
		var ret float32
		return ret
	}
	return *o.GranularitySeconds
}

// GetGranularitySecondsOk returns a tuple with the GranularitySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricMetadataResultItem) GetGranularitySecondsOk() (*float32, bool) {
	if o == nil || isNil(o.GranularitySeconds) {
    return nil, false
	}
	return o.GranularitySeconds, true
}

// HasGranularitySeconds returns a boolean if a field has been set.
func (o *MetricMetadataResultItem) HasGranularitySeconds() bool {
	if o != nil && !isNil(o.GranularitySeconds) {
		return true
	}

	return false
}

// SetGranularitySeconds gets a reference to the given float32 and assigns it to the GranularitySeconds field.
func (o *MetricMetadataResultItem) SetGranularitySeconds(v float32) {
	o.GranularitySeconds = &v
}

func (o MetricMetadataResultItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GranularitySeconds) {
		toSerialize["granularitySeconds"] = o.GranularitySeconds
	}
	return json.Marshal(toSerialize)
}

type NullableMetricMetadataResultItem struct {
	value *MetricMetadataResultItem
	isSet bool
}

func (v NullableMetricMetadataResultItem) Get() *MetricMetadataResultItem {
	return v.value
}

func (v *NullableMetricMetadataResultItem) Set(val *MetricMetadataResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricMetadataResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricMetadataResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricMetadataResultItem(val *MetricMetadataResultItem) *NullableMetricMetadataResultItem {
	return &NullableMetricMetadataResultItem{value: val, isSet: true}
}

func (v NullableMetricMetadataResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricMetadataResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


