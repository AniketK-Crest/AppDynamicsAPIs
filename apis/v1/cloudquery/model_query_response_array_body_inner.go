/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
	"fmt"
)

// QueryResponseArrayBodyInner struct for QueryResponseArrayBodyInner
type QueryResponseArrayBodyInner struct {
	DataResultChunk *DataResultChunk
	ErrorResultChunk *ErrorResultChunk
	HeartbeatResultChunk *HeartbeatResultChunk
	ModelResultChunk *ModelResultChunk
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *QueryResponseArrayBodyInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DataResultChunk
	err = json.Unmarshal(data, &dst.DataResultChunk);
	if err == nil {
		jsonDataResultChunk, _ := json.Marshal(dst.DataResultChunk)
		if string(jsonDataResultChunk) == "{}" { // empty struct
			dst.DataResultChunk = nil
		} else {
			return nil // data stored in dst.DataResultChunk, return on the first match
		}
	} else {
		dst.DataResultChunk = nil
	}

	// try to unmarshal JSON data into ErrorResultChunk
	err = json.Unmarshal(data, &dst.ErrorResultChunk);
	if err == nil {
		jsonErrorResultChunk, _ := json.Marshal(dst.ErrorResultChunk)
		if string(jsonErrorResultChunk) == "{}" { // empty struct
			dst.ErrorResultChunk = nil
		} else {
			return nil // data stored in dst.ErrorResultChunk, return on the first match
		}
	} else {
		dst.ErrorResultChunk = nil
	}

	// try to unmarshal JSON data into HeartbeatResultChunk
	err = json.Unmarshal(data, &dst.HeartbeatResultChunk);
	if err == nil {
		jsonHeartbeatResultChunk, _ := json.Marshal(dst.HeartbeatResultChunk)
		if string(jsonHeartbeatResultChunk) == "{}" { // empty struct
			dst.HeartbeatResultChunk = nil
		} else {
			return nil // data stored in dst.HeartbeatResultChunk, return on the first match
		}
	} else {
		dst.HeartbeatResultChunk = nil
	}

	// try to unmarshal JSON data into ModelResultChunk
	err = json.Unmarshal(data, &dst.ModelResultChunk);
	if err == nil {
		jsonModelResultChunk, _ := json.Marshal(dst.ModelResultChunk)
		if string(jsonModelResultChunk) == "{}" { // empty struct
			dst.ModelResultChunk = nil
		} else {
			return nil // data stored in dst.ModelResultChunk, return on the first match
		}
	} else {
		dst.ModelResultChunk = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(QueryResponseArrayBodyInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *QueryResponseArrayBodyInner) MarshalJSON() ([]byte, error) {
	if src.DataResultChunk != nil {
		return json.Marshal(&src.DataResultChunk)
	}

	if src.ErrorResultChunk != nil {
		return json.Marshal(&src.ErrorResultChunk)
	}

	if src.HeartbeatResultChunk != nil {
		return json.Marshal(&src.HeartbeatResultChunk)
	}

	if src.ModelResultChunk != nil {
		return json.Marshal(&src.ModelResultChunk)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableQueryResponseArrayBodyInner struct {
	value *QueryResponseArrayBodyInner
	isSet bool
}

func (v NullableQueryResponseArrayBodyInner) Get() *QueryResponseArrayBodyInner {
	return v.value
}

func (v *NullableQueryResponseArrayBodyInner) Set(val *QueryResponseArrayBodyInner) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryResponseArrayBodyInner) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryResponseArrayBodyInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryResponseArrayBodyInner(val *QueryResponseArrayBodyInner) *NullableQueryResponseArrayBodyInner {
	return &NullableQueryResponseArrayBodyInner{value: val, isSet: true}
}

func (v NullableQueryResponseArrayBodyInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryResponseArrayBodyInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


