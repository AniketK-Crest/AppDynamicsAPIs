/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
	"time"
)

// ErrorResult A representation of an error that occurred during query execution. It contains at least brief a description of the error and contextual information of the corresponding request.
type ErrorResult struct {
	// URI to the documentation of the error.
	Type string `json:"type"`
	// The code of a error.
	ErrorCode *string `json:"errorCode,omitempty"`
	// Time and date the error occurred.
	Timestamp time.Time `json:"timestamp"`
	// Id to correlate events and logs across dependent services for a single query.
	TraceId string `json:"traceId"`
	// Brief description of the error.
	Title string `json:"title"`
	// Usually a more detailed description of the error.
	Detail string `json:"detail"`
	// The id of a tenant for which the query was executed.
	TenantId string `json:"tenantId"`
	// The input query.
	Query string `json:"query"`
	// An array containing the details of an error.
	ErrorDetails []ErrorDetailsArrayInner `json:"errorDetails,omitempty"`
}

// NewErrorResult instantiates a new ErrorResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResult(type_ string, timestamp time.Time, traceId string, title string, detail string, tenantId string, query string) *ErrorResult {
	this := ErrorResult{}
	this.Type = type_
	this.Timestamp = timestamp
	this.TraceId = traceId
	this.Title = title
	this.Detail = detail
	this.TenantId = tenantId
	this.Query = query
	return &this
}

// NewErrorResultWithDefaults instantiates a new ErrorResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResultWithDefaults() *ErrorResult {
	this := ErrorResult{}
	return &this
}

// GetType returns the Type field value
func (o *ErrorResult) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ErrorResult) SetType(v string) {
	o.Type = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ErrorResult) GetErrorCode() string {
	if o == nil || isNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetErrorCodeOk() (*string, bool) {
	if o == nil || isNil(o.ErrorCode) {
    return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ErrorResult) HasErrorCode() bool {
	if o != nil && !isNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *ErrorResult) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetTimestamp returns the Timestamp field value
func (o *ErrorResult) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ErrorResult) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetTraceId returns the TraceId field value
func (o *ErrorResult) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetTraceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *ErrorResult) SetTraceId(v string) {
	o.TraceId = v
}

// GetTitle returns the Title field value
func (o *ErrorResult) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ErrorResult) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *ErrorResult) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetDetailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ErrorResult) SetDetail(v string) {
	o.Detail = v
}

// GetTenantId returns the TenantId field value
func (o *ErrorResult) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetTenantIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *ErrorResult) SetTenantId(v string) {
	o.TenantId = v
}

// GetQuery returns the Query field value
func (o *ErrorResult) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetQueryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *ErrorResult) SetQuery(v string) {
	o.Query = v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *ErrorResult) GetErrorDetails() []ErrorDetailsArrayInner {
	if o == nil || isNil(o.ErrorDetails) {
		var ret []ErrorDetailsArrayInner
		return ret
	}
	return o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResult) GetErrorDetailsOk() ([]ErrorDetailsArrayInner, bool) {
	if o == nil || isNil(o.ErrorDetails) {
    return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *ErrorResult) HasErrorDetails() bool {
	if o != nil && !isNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given []ErrorDetailsArrayInner and assigns it to the ErrorDetails field.
func (o *ErrorResult) SetErrorDetails(v []ErrorDetailsArrayInner) {
	o.ErrorDetails = v
}

func (o ErrorResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["traceId"] = o.TraceId
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	if true {
		toSerialize["tenantId"] = o.TenantId
	}
	if true {
		toSerialize["query"] = o.Query
	}
	if !isNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	return json.Marshal(toSerialize)
}

type NullableErrorResult struct {
	value *ErrorResult
	isSet bool
}

func (v NullableErrorResult) Get() *ErrorResult {
	return v.value
}

func (v *NullableErrorResult) Set(val *ErrorResult) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResult) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResult(val *ErrorResult) *NullableErrorResult {
	return &NullableErrorResult{value: val, isSet: true}
}

func (v NullableErrorResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


