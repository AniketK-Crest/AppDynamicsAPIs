/*
AppDynamics Cloud Query Service API

An API providing access to observation data using an AppDynamics domain-specific language.  The language is declarative, read-only (it does not allow for data modification) and specific to the AppD MELT model. It presents MELT data (metrics, events, logs, traces) and State in the scope of monitored topology.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudquery

import (
	"encoding/json"
	"fmt"
)

// MetadataResultItem Additional information collected for the data contained in the data chunk.
type MetadataResultItem struct {
	EventMetadataResultItem *EventMetadataResultItem
	MainMetadataResultItem *MainMetadataResultItem
	MetricMetadataResultItem *MetricMetadataResultItem
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MetadataResultItem) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into EventMetadataResultItem
	err = json.Unmarshal(data, &dst.EventMetadataResultItem);
	if err == nil {
		jsonEventMetadataResultItem, _ := json.Marshal(dst.EventMetadataResultItem)
		if string(jsonEventMetadataResultItem) == "{}" { // empty struct
			dst.EventMetadataResultItem = nil
		} else {
			return nil // data stored in dst.EventMetadataResultItem, return on the first match
		}
	} else {
		dst.EventMetadataResultItem = nil
	}

	// try to unmarshal JSON data into MainMetadataResultItem
	err = json.Unmarshal(data, &dst.MainMetadataResultItem);
	if err == nil {
		jsonMainMetadataResultItem, _ := json.Marshal(dst.MainMetadataResultItem)
		if string(jsonMainMetadataResultItem) == "{}" { // empty struct
			dst.MainMetadataResultItem = nil
		} else {
			return nil // data stored in dst.MainMetadataResultItem, return on the first match
		}
	} else {
		dst.MainMetadataResultItem = nil
	}

	// try to unmarshal JSON data into MetricMetadataResultItem
	err = json.Unmarshal(data, &dst.MetricMetadataResultItem);
	if err == nil {
		jsonMetricMetadataResultItem, _ := json.Marshal(dst.MetricMetadataResultItem)
		if string(jsonMetricMetadataResultItem) == "{}" { // empty struct
			dst.MetricMetadataResultItem = nil
		} else {
			return nil // data stored in dst.MetricMetadataResultItem, return on the first match
		}
	} else {
		dst.MetricMetadataResultItem = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MetadataResultItem)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *MetadataResultItem) MarshalJSON() ([]byte, error) {
	if src.EventMetadataResultItem != nil {
		return json.Marshal(&src.EventMetadataResultItem)
	}

	if src.MainMetadataResultItem != nil {
		return json.Marshal(&src.MainMetadataResultItem)
	}

	if src.MetricMetadataResultItem != nil {
		return json.Marshal(&src.MetricMetadataResultItem)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableMetadataResultItem struct {
	value *MetadataResultItem
	isSet bool
}

func (v NullableMetadataResultItem) Get() *MetadataResultItem {
	return v.value
}

func (v *NullableMetadataResultItem) Set(val *MetadataResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataResultItem(val *MetadataResultItem) *NullableMetadataResultItem {
	return &NullableMetadataResultItem{value: val, isSet: true}
}

func (v NullableMetadataResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


